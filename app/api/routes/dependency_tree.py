from fastapi import APIRouter, HTTPException

from app.services.tree_handler import TreeHandler
from app.models.response import AugmentationResponse
from app.models.input_body import DependencyTreeBody

router = APIRouter()
tree_handler = TreeHandler()


@router.post("/", response_model=AugmentationResponse)
async def blank_augmentation(request: DependencyTreeBody):
    """
    Augmentation by dropping random phrases generated by PhoNLP dependency tree.
    """
    if not request:
        raise HTTPException(status_code=404, detail=f"'request' argument invalid!")
    try:
        augmented_text = tree_handler.augment(text=request.text_str,
                                              is_segmented=request.is_segmented_bool,
                                              segment=request.segment_bool,
                                              exclude=request.exclude_lst)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Exception: {e}")

    return AugmentationResponse(text=augmented_text, org_text=request.text_str)
